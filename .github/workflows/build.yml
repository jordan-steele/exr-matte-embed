name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  discussions: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Create Windows Executable
      uses: sayyid5416/pyinstaller@v1
      with:
        spec: 'main.py'
        requirements: 'requirements.txt'
        python_ver: '3.9'
        options: |
          --onefile,
          --windowed,
          --name "EXR Matte Embed",
          --icon "images/icon.ico",
          --hidden-import numpy,
          --hidden-import numpy.core,
          --hidden-import numpy.random,
          --copy-metadata OpenEXR,
          --copy-metadata numpy
        upload_exe_with_name: 'EXR-Matte-Embed-windows-x64'

  build-macos-intel:
    runs-on: macos-13
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        brew install python-tk@3.9
        brew install create-dmg

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install tk
        pip install pyinstaller

    - name: Verify Tkinter
      run: |
        python -c "import tkinter; print('Tkinter version:', tkinter.TkVersion)"
        python -c "import _tkinter; print('_tkinter location:', _tkinter.__file__)"

    - name: Create macOS App Bundle
      run: |
        python -m PyInstaller \
          --windowed \
          --name "EXR Matte Embed" \
          --icon "images/icon.icns" \
          --add-data "images:images" \
          --hidden-import tkinter \
          --hidden-import _tkinter \
          --hidden-import numpy \
          --copy-metadata OpenEXR \
          --copy-metadata numpy \
          main.py

    - name: Create DMG
      run: |
        create-dmg \
          --volname "EXR Matte Embed" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "EXR Matte Embed.app" 200 190 \
          --hide-extension "EXR Matte Embed.app" \
          --app-drop-link 600 185 \
          --skip-jenkins \
          "dist/EXR-Matte-Embed-macos-intel.dmg" \
          "dist/EXR Matte Embed.app"

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: EXR-Matte-Embed-macos-intel
        path: dist/EXR-Matte-Embed-macos-intel.dmg

  build-macos-apple-silicon:
    runs-on: macos-14
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Display package info
      run: |
        pip list
        python -c "import numpy; print(numpy.__file__)"
        python -c "import OpenEXR; print(OpenEXR.__file__)"

    - name: Install create-dmg
      run: brew install create-dmg

    - name: Create macOS App Bundle
      run: |
        python -m PyInstaller \
          --windowed \
          --name "EXR Matte Embed" \
          --icon "images/icon.icns" \
          --add-data "images:images" \
          --hidden-import numpy \
          --copy-metadata OpenEXR \
          --copy-metadata numpy \
          main.py

    - name: Create DMG
      run: |
        create-dmg \
          --volname "EXR Matte Embed" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "EXR Matte Embed.app" 200 190 \
          --hide-extension "EXR Matte Embed.app" \
          --app-drop-link 600 185 \
          --skip-jenkins \
          "dist/EXR-Matte-Embed-macos-apple-silicon.dmg" \
          "dist/EXR Matte Embed.app"

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: EXR-Matte-Embed-macos-apple-silicon
        path: dist/EXR-Matte-Embed-macos-apple-silicon.dmg

  create-release:
    needs: [build-windows, build-macos-intel, build-macos-apple-silicon]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startswith(github.ref, 'refs/tags/')
      with:
        files: |
          EXR-Matte-Embed-windows-x64/*
          EXR-Matte-Embed-macos-intel/*
          EXR-Matte-Embed-macos-apple-silicon/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}