name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release'
        type: boolean
        default: false
        required: true

permissions:
  contents: write
  discussions: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Display package info
      run: |
        pip list
        python -c "import numpy; print(numpy.__file__)"
        python -c "import OpenEXR; print(OpenEXR.__file__)"

    - name: Create Windows Executable
      run: |
        python -m PyInstaller `
          --onefile `
          --windowed `
          --name "EXR Matte Embed" `
          --icon "images/icon.ico" `
          --add-data "images/icon.ico;images/icon.ico" `
          --hidden-import numpy `
          --copy-metadata OpenEXR `
          --copy-metadata numpy `
          main.py

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: EXR-Matte-Embed-windows-x64
        path: dist/EXR Matte Embed.exe

  build-macos:
    strategy:
      matrix:
        include:
          - runner: macos-13
            arch: intel
          - runner: macos-14
            arch: apple-silicon
    runs-on: ${{ matrix.runner }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Display package info
      run: |
        pip list
        python -c "import numpy; print(numpy.__file__)"
        python -c "import OpenEXR; print(OpenEXR.__file__)"

    - name: Install create-dmg
      run: brew install create-dmg

    - name: Create macOS App Bundle
      run: |
        python -m PyInstaller \
          --windowed \
          --name "EXR Matte Embed" \
          --icon "images/icon.icns" \
          --add-data "images:images" \
          --hidden-import numpy \
          --copy-metadata OpenEXR \
          --copy-metadata numpy \
          main.py

    - name: Create DMG
      run: |
        create-dmg \
          --volname "EXR Matte Embed" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "EXR Matte Embed.app" 200 190 \
          --hide-extension "EXR Matte Embed.app" \
          --app-drop-link 600 185 \
          --skip-jenkins \
          "dist/EXR-Matte-Embed-macos-${{ matrix.arch }}.dmg" \
          "dist/EXR Matte Embed.app"

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: EXR-Matte-Embed-macos-${{ matrix.arch }}
        path: dist/EXR-Matte-Embed-macos-${{ matrix.arch }}.dmg

  create-release:
    needs: [build-windows, build-macos]
    if: startswith(github.ref, 'refs/tags/') || inputs.create_release
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startswith(github.ref, 'refs/tags/')
      with:
        files: |
          EXR-Matte-Embed-windows-x64/*
          EXR-Matte-Embed-macos-intel/*
          EXR-Matte-Embed-macos-apple-silicon/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}